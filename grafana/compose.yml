services:
  grafana:
    image: grafana/grafana:11.1.4
    restart: unless-stopped
    user: "0"
    volumes:
      - ${HOSTING_DIR}/grafana/data:/var/lib/grafana
      - ${HOSTING_DIR}/grafana/grafana-config:/etc/grafana
    ports:
      - 3101:3000
    networks:
      - public-proxy
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ALLOW_EMBEDDING=true

  otel-collector:
    image: otel/opentelemetry-collector:0.123.0
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ${HOSTING_DIR}/grafana/configs/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1.0'
    ports:
      - 1888:1888
      - 8888:8888
      - 8889:8889
      - 13133:13133
      - 4317:4317
      - 4318:4318
      - 55679:55679
    networks:
      - public-proxy
    depends_on:
      - jaeger
      - prometheus
    healthcheck:
      # Command to run inside the container to check health
      test: ["CMD", "curl", "-f", "http://localhost:13133"]
      interval: 30s   # How often to run the check
      timeout: 10s    # How long to wait for a response
      retries: 3      # How many times to retry before marking as unhealthy
      start_period: 40s # Grace period for the container to start up

  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    user: "0"
    environment:
      - LOG_LEVEL=debug
      - COLLECTOR_OTLP_ENABLED=true
      # --- Persistence Configuration ---
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
      - BADGER_SPAN_STORE_TTL=1440h # 2months
    volumes:
      - ${HOSTING_DIR}/grafana/jaeger-data:/badger
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=public-proxy"
      - "traefik.http.routers.jaeger.entrypoints=websecured"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.internal.apogee-dev.com`)"
      - "traefik.http.routers.jaeger.middlewares=default-compress@file,auth-jaeger"
      - "traefik.http.routers.jaeger.service=jaeger"
      - "traefik.http.routers.jaeger.tls=true"
      - "traefik.http.routers.jaeger.tls.domains[0].main=jaeger.internal.apogee-dev.com"

      - "traefik.http.middlewares.auth-jaeger.forwardAuth.address=https://fwd-auth.internal.apogee-dev.com/login/check?token=${JaegerServiceToken}"
      - "traefik.http.middlewares.auth-jaeger.forwardAuth.addAuthCookiesToResponse=.fwd-auth-custom"
      - "traefik.http.middlewares.auth-jaeger.forwardAuth.trustForwardHeader=true"
      - "traefik.http.middlewares.auth-jaeger.forwardAuth.tls.insecureSkipVerify=true"

      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"
    networks:
      - public-proxy

  prometheus:
    image: prom/prometheus:v3.3.0
    restart: unless-stopped
    user: 0:0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=60d'
    volumes:
      - ${HOSTING_DIR}/grafana/configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${HOSTING_DIR}/grafana/prometheus:/prometheus
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1.0'
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=public-proxy"
      - "traefik.http.routers.prometheus.entrypoints=websecured"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.internal.apogee-dev.com`)"
      - "traefik.http.routers.prometheus.middlewares=default-compress@file,auth-prom"
      - "traefik.http.routers.prometheus.service=prometheus"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.domains[0].main=prometheus.internal.apogee-dev.com"

      - "traefik.http.middlewares.auth-prom.forwardAuth.address=https://fwd-auth.internal.apogee-dev.com/login/check?token=${PrometheusServiceToken}"
      - "traefik.http.middlewares.auth-prom.forwardAuth.addAuthCookiesToResponse=.fwd-auth-custom"
      - "traefik.http.middlewares.auth-prom.forwardAuth.trustForwardHeader=true"
      - "traefik.http.middlewares.auth-prom.forwardAuth.tls.insecureSkipVerify=true"

      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    networks:
      - public-proxy

networks:
  public-proxy:
    external: true
